#!/bin/bash
###############################################################################################################
#                                            BatchArtemisSRAMiner                                             #   
#                                                JCO Mifsud                                                   # 
#                                                   2023                                                      # 
#                                                                                                             #
#                                 please ask before sharing these scripts :)                                  #
###############################################################################################################

#PBS -N unzip_and_get_read_count
#PBS -l select=1:ncpus=4:mem=20GB
#PBS -M jmif9945@uni.sydney.edu.au
#PBS -m abe

# Change directory to the project's read_count directory. If the directory does not exist, exit the script.
cd /project/"$root_project"/"$project"/read_count || { echo "Directory not found"; exit 1; }

# Read file_of_accessions line by line into an array
readarray -t myarray < "$file_of_accessions"

# Get the corresponding line from the array based on the PBS_ARRAY_INDEX
export library_run=${myarray["$PBS_ARRAY_INDEX"]}

# Remove .gz from the end of library_run
new_name=${library_run%".gz"}

# Extract the basename of new_name
library_id="$(basename -- $new_name)"

# Unzip the gzipped file and write the contents to new_name. If this fails, exit the script.
gunzip -c "$library_run" > "$new_name" || { echo "Failed to unzip $library_run"; exit 1; }

# Calculate the read count by dividing the total number of lines in the file by 4 (since each read in FASTQ format consists of 4 lines)
# The -n option with echo is used to prevent adding a new line
# The result is appended to a file named project_accessions_reads
echo -n "$library_id"","`echo $(cat $new_name|wc -l)/4 | bc`"\n" >> /project/"$root_project"/"$project"/read_count/"$project"_accessions_reads

# Remove the unzipped file to save space. If this fails, print an error message but do not exit the script.
rm "$new_name" || echo "Failed to remove $new_name"
